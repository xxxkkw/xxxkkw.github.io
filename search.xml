<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于yolov5的羽毛球轨迹识别</title>
      <link href="/2024/10/18/yolov5/"/>
      <url>/2024/10/18/yolov5/</url>
      
        <content type="html"><![CDATA[<p>yolov5是一种很流行的目标检测系统，基于这套系统，我们可以很轻松的开发各种识别物体的项目，不过需要自己准备数据集，以及一定的计算资源。<br>本质上来说，yolov5也是一个基于深度学习的视觉识别系统，效果很不错，就省去了自己开发的过程。同时还可以在源代码上修改，来实现自己的需求。<br>首先从部署yolov5开始：<br>首先，部署的环境是基于python的，为了方便管理，我们使用anaconda创建一个新的虚拟环境，以便跟别的环境隔离开，这样就不会冲突。<br>在命令行中输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n yolov5 python=3.10</span><br></pre></td></tr></table></figure><br>然后再输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate yolov5</span><br></pre></td></tr></table></figure><br>这样就创建好并且进入了一个新的环境内。接下来克隆官方仓库并且安装依赖项<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ultralytics/yolov5</span><br><span class="line">cd yolov5</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><br>如果有N卡的话还得下载对应的cuda<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113</span><br></pre></td></tr></table></figure><br>到这里yolov5的环境就配置好了。随便跑点样例实验一下。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --device 0</span><br></pre></td></tr></table></figure><br>这就是一个最简单的训练的代码，使用的是官方的数据集，训练后的模型存储在 runs/train/exp/weights/best.pt<br>尝试用模型检测一下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python detect.py --device 0</span><br></pre></td></tr></table></figure><br>检测的结果会在 runs/detect/exp中<br>上面是一些比较简单的配置还有验证的过程，接下来的是最重要的，想要对一个物体进行识别，首先得有数据集，然后基于这个数据集进行训练，因为网上实在没有羽毛球的模型，我就自己框了大概1500张图，分割三分之一作为验证集，剩下的作为训练集。框图可以用这个<a href="http://makesense.bimant.com/">网站</a><br>框图之后会得到一份标签集，可以使用下面的代码分割训练集验证集<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">image_folder = &#x27;path/to/images&#x27;  # 图片文件夹路径</span><br><span class="line">label_folder = &#x27;path/to/labels&#x27;  # 标签文件夹路径</span><br><span class="line"></span><br><span class="line">val_image_folder = &#x27;path/to/val_images&#x27;  # 验证集图片存放路径</span><br><span class="line">val_label_folder = &#x27;path/to/val_labels&#x27;  # 验证集标签存放路径</span><br><span class="line"></span><br><span class="line">os.makedirs(val_image_folder, exist_ok=True)</span><br><span class="line">os.makedirs(val_label_folder, exist_ok=True)</span><br><span class="line"></span><br><span class="line">image_files = sorted(os.listdir(image_folder))</span><br><span class="line">label_files = sorted(os.listdir(label_folder))</span><br><span class="line"></span><br><span class="line">if len(image_files) != len(label_files):</span><br><span class="line">raise ValueError(&quot;图片和标签数量不匹配！请检查文件夹内容。&quot;)</span><br><span class="line"></span><br><span class="line">for i, image_file in enumerate(image_files):</span><br><span class="line">if (i + 1) % 3 == 0:  # 每三张图片选一张</span><br><span class="line"># 获取对应的标签文件名</span><br><span class="line">label_file = label_files[i]</span><br><span class="line"></span><br><span class="line">        image_path = os.path.join(image_folder, image_file)</span><br><span class="line">        label_path = os.path.join(label_folder, label_file)</span><br><span class="line">        </span><br><span class="line">        shutil.move(image_path, os.path.join(val_image_folder, image_file))</span><br><span class="line">        shutil.move(label_path, os.path.join(val_label_folder, label_file))</span><br><span class="line">        </span><br><span class="line">print(&quot;验证集划分完成！&quot;)</span><br></pre></td></tr></table></figure><br>然后再对分割好的数据集去训练<br>下面是基于项目需求，对代码的修改<br>首先添加一个元组，并且生成一个背景，用于绘制我们的轨迹<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_centers = []</span><br><span class="line">canvas = np.ones((im0s.shape[0], im0s.shape[1], 3), dtype=np.uint8) * 255</span><br></pre></td></tr></table></figure><br>用来存储我们识别到的羽毛球在空间中的坐标<br>然后在识别到目标之后，把原代码的框选修改为点<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x_center = (xyxy[0] + xyxy[2]) / 2</span><br><span class="line">y_center = (xyxy[1] + xyxy[3]) / 2</span><br><span class="line">#LOGGER.info(&quot;x_center: %f, y_center: %f&quot;, x_center, y_center)</span><br><span class="line">all_centers.append((x_center, y_center))</span><br><span class="line">radius = 10</span><br><span class="line">color = (0, 0, 255)</span><br><span class="line">cv2.circle(imc, (int(x_center), int(y_center)), radius, color, thickness=-1)</span><br></pre></td></tr></table></figure><br>然后再遍历我们的坐标，将点绘制在背景上<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for x_center , y_center in all_centers:</span><br><span class="line">    cv2.circle(canvas, (int(x_center), int(y_center)), 10, (0, 0, 255), -1)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">save_path = increment_path(Path(project) / name, exist_ok=exist_ok)</span><br><span class="line">save_path.mkdir(parents=True, exist_ok=True)</span><br><span class="line">final_save_path = save_path / &quot;all_centers.jpg&quot;</span><br><span class="line">cv2.imwrite(str(final_save_path), canvas)</span><br></pre></td></tr></table></figure><br>然后就可以得到羽毛球的轨迹啦</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RFID实验，FM0编解码代码</title>
      <link href="/2024/10/17/FM0/"/>
      <url>/2024/10/17/FM0/</url>
      
        <content type="html"><![CDATA[<p>使用matlab编写的一份用于编解码信号的.m文件<br>密勒码解码过程可以表述为：以 2 倍的数据时钟码读入，进行每两位转换一次，01 和 10 都转换为 1，00 和 11 都转换为 0，这样即完成解码得到原始 NRZ 码，本实验无起始同步和停止过程<br>本代码参照密勒码的文件修改<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">x = [1 0 1 1 0 0 0 1];</span><br><span class="line">FM0 = zeros(1, 2 * length(x));</span><br><span class="line">state = 0;</span><br><span class="line"></span><br><span class="line">for i = 1:length(x)</span><br><span class="line">    if x(i) == 1</span><br><span class="line">        FM0(2*i-1) = ~state;</span><br><span class="line">        state = ~state;</span><br><span class="line">        FM0(2*i) = state;</span><br><span class="line">    else</span><br><span class="line">        FM0(2*i-1) = ~state;</span><br><span class="line">        state = ~state;</span><br><span class="line">        FM0(2*i) = ~state;</span><br><span class="line">        state = ~state;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">subplot(2, 1, 1);</span><br><span class="line">stairs(0:length(x)-1, x, &#x27;r&#x27;);</span><br><span class="line">title(&#x27;原始数据&#x27;);</span><br><span class="line"></span><br><span class="line">subplot(2, 1, 2);</span><br><span class="line">stairs(0:length(FM0)-1, FM0, &#x27;r&#x27;);</span><br><span class="line">title(&#x27;FM0 编码结果&#x27;);</span><br><span class="line"></span><br><span class="line">decoded_data = zeros(1, length(FM0) / 2);</span><br><span class="line"></span><br><span class="line">for i = 1:2:length(FM0)-2</span><br><span class="line">    if (FM0(i) ~= FM0(i+1)) &amp;&amp; (FM0(i+1) == FM0(i+2))</span><br><span class="line">        decoded_data((i+1)/2) = 1;</span><br><span class="line">    else</span><br><span class="line">        decoded_data((i+1)/2) = 0;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">subplot(2, 1, 1);</span><br><span class="line">stairs(0:length(decoded_data)-1, decoded_data, &#x27;r&#x27;);</span><br><span class="line">title(&#x27;FM0 解码结果&#x27;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>随便写点</title>
      <link href="/2024/10/15/start/"/>
      <url>/2024/10/15/start/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客! 如果感兴趣的话就多逛逛。不定期更新项目的经历，记录自己走过的路。这是我的<a href="https://github.com/xxxkkw">代码仓库</a>。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
